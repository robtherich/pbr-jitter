<jittershader name="PBR">
	<description>a physical-based rendering shader </description>
	<param name="pos" 	type="vec3" state="POSITION" />
	<param name="nor" 	type="vec3" state="NORMAL" />
	<param name="tan" 	type="vec3" state="TANGENT" />
	<param name="uv" 	type="vec2" state="TEXCOORD" />
	<param name="MVP" 	type="mat4" state="MODELVIEW_PROJECTION_MATRIX" />
	<param name="MV"	type="mat4" state="MODELVIEW_MATRIX" />
	<param name="M" 	type="mat4" state="WORLD_MATRIX" />
	<param name="NM"	type="mat3" state="NORMAL_MATRIX" />
	<param name="eye" 	type="vec3" state="CAMERA_POSITION" />
	//textures
	<param name="albedoTex" 	type="int" default="0" />
	<param name="normalTex" 	type="int" default="1" />
	<param name="RMOHTex" 		type="int" default="2" />
	<param name="irradianceTex"	type="int" default="3" />
	<param name="equirectTex"	type="int" default="4" />
	<param name="rectLightTex"  type="int" default="5" />
	<param name="integMap"		type="int" default="6" />
	<texture file="ibl_brdf_lut.png" type="float16" unit="6" rectangle="0" filter="none none" wrap="repeat repeat"/>


    <param name="useTextures"  	type="float"  	default="1." />
	<param name="albedo"  		type="vec3" 	default="1. 1. 1." />
	<param name="roughness"  	type="float" 	default="0.3" />
	<param name="metalness"  	type="float" 	default="0.0" />

	<param name="texRepeat" 			type="vec2" default="1. 1." />
	<param name="heightScale"			type="float" default="0.002" />
	<param name="triplanarUV"   		type="float" default="1." />
	<param name="triplanarExp"  		type="float" default="12." />
	<param name="triplanarTexRepeat" 	type="vec2" default="0.5 0.5" />
	<param name="parallaxMapping"  		type="float" default="0." />
	<param name="parallaxIterations" 	type="vec2"  default="50. 100." />
	<param name="selfShadowing"   		type="float" default="0." />
	<param name="shadowAmount"  		type="float" default="15." />
	<param name="shadowIterations" 		type="vec2"  default="50. 100." />

	<language name="glsl" version="1.5">
		<bind param="pos" 	program="vp" />
		<bind param="nor" 	program="vp" />
		<bind param="tan" 	program="vp" />
		<bind param="uv" 	program="vp" />
		<bind param="MVP" 	program="vp" />
		<bind param="MV"	program="vp" />
		<bind param="M" 	program="vp" />
		<bind param="NM"	program="vp" />
		<bind param="eye" 	program="fp" />
		//textures
		<bind param="albedoTex" 	program="fp" />
		<bind param="normalTex" 	program="fp" />
		<bind param="RMOHTex" 		program="fp" />
		<bind param="irradianceTex" program="fp" />
		<bind param="equirectTex"   program="fp" />
		<bind param="rectLightTex"  program="fp" />
		<bind param="integMap"      program="fp" />

		<bind param="useTextures" 	program="fp" />
		<bind param="albedo" 		program="fp" />
		<bind param="roughness"		program="fp" />
		<bind param="metalness" 	program="fp" />

		<bind param="texRepeat"				program="vp" />
		<bind param="heightScale"   		program="fp" />
		<bind param="triplanarUV"   		program="fp" />
		<bind param="triplanarExp"			program="fp" />
		<bind param="triplanarTexRepeat" 	program="fp" />
		<bind param="parallaxMapping"  		program="fp" />
		<bind param="parallaxIterations"   	program="fp" />
		<bind param="selfShadowing"   		program="fp" />
		<bind param="shadowAmount"  		program="fp" />
		<bind param="shadowIterations"   	program="fp" />

		<program name="vp" type="vertex">
<![CDATA[
#version 330 core
uniform mat4 MVP, MV, M;
uniform mat3 NM;
uniform vec2 texRepeat;
in vec3 pos, nor, tan;
in vec2 uv;

out jit_PerVertex {	
	smooth 	vec3 nor;
	smooth 	vec3 tan;
	smooth 	vec3 bit;
	smooth 	vec3 pos;
	smooth 	vec2 uv;
	flat 	vec2 texRepeat;
	smooth 	vec3 eyePos;
	smooth  vec3 modelPos;
	smooth  vec3 modelNor;
	smooth  mat3 TBN;
	smooth  mat3 transTBN;
} jit_out;

void main() {	

	gl_Position = MVP * vec4(pos, 1.);	
	jit_out.nor = (M * vec4(nor, 0.)).xyz;
	jit_out.tan = -(M * vec4(tan, 0.)).xyz;
	//jit_out.tan = normalize(jit_out.tan - dot(jit_out.tan, jit_out.nor) * jit_out.nor);
	jit_out.bit = cross(jit_out.nor, jit_out.tan);
	jit_out.pos = (M * vec4(pos, 1.)).xyz;
	jit_out.uv = uv*texRepeat;
	jit_out.texRepeat = texRepeat;
	jit_out.eyePos = (MV * vec4(pos, 1.)).xyz;
	jit_out.modelPos = pos;
	jit_out.modelNor = nor;
	jit_out.TBN = mat3(jit_out.tan, jit_out.bit, jit_out.nor);
	jit_out.transTBN = transpose(jit_out.TBN);
}
]]>
		</program>
		<program name="fp" type="fragment">
<![CDATA[
#version 330 core
#define PI 3.14159265
#define TWOPI 6.28318531
#define PI_INV 0.3183098861
#define RECT_LIGHT_RADIUS 4.0 //controlla cosa rappresenta questo parametro ***
#define RECT_LIGHT_INTENSITY 64.0 //controlla cosa rappresenta questo parametro ***

uniform vec3 eye;
uniform sampler2D albedoTex, normalTex, RMOHTex, equirectTex, rectLightTex, integMap;
uniform samplerCube irradianceTex;
uniform float heightScale, triplanarUV, triplanarExp, parallaxMapping, selfShadowing, shadowAmount, useTextures;
uniform vec2 triplanarTexRepeat, parallaxIterations, shadowIterations;
uniform vec3 albedo;
uniform float roughness, metalness;

in jit_PerVertex {
	smooth 	vec3 nor;
	smooth 	vec3 tan;
	smooth 	vec3 bit;
	smooth 	vec3 pos;
	smooth 	vec2 uv;	
	flat 	vec2 texRepeat;
	smooth  vec3 eyePos;
	smooth  vec3 modelPos;
	smooth  vec3 modelNor;
	smooth  mat3 TBN;
	smooth  mat3 transTBN;
} jit_in;

struct 	material{
	vec3 	alb;
	float 	occ;
	float 	met;
	float 	rou;
	float 	height;
	vec3 	F0;
};

struct 	geometry{
	vec3	V;
	vec3	N;
	vec3 	R;
	vec3	tanN;
	vec3	pos;
	vec2	uv;
};

struct light{
	vec3  	ligPos;
	vec3    ligCol;
	vec3  	ligDir;
	float  	cutoffInner;
	float  	cutoffOuter;
	float 	width, height;
	bool 	twoSided;
};

out vec4 col;

//utilities
vec3 	lin2sRGB(vec3 x){ return pow(x, vec3(0.4545454545));}
vec3 	sRGB2lin(vec3 x){ return pow(x, vec3(2.2));}
float 	saturate(float x){ return clamp(x, 0., 1.);}


//triplanar mapping
vec4 	triplanar(sampler2D tex){

	vec3 	k = normalize(pow(abs(jit_in.modelNor), vec3(triplanarExp)));
	vec2 	Xuv = jit_in.modelPos.yz*triplanarTexRepeat;
			Xuv.x = jit_in.modelNor.x < 0. ? Xuv.x : -Xuv.x;
	vec2 	Yuv = jit_in.modelPos.xz*triplanarTexRepeat;
			Yuv.x = jit_in.modelNor.y < 0. ? Yuv.x : -Yuv.x;
	vec2 	Zuv = jit_in.modelPos.xy*triplanarTexRepeat;
			Zuv.x = jit_in.modelNor.z >= 0. ? Zuv.x : -Zuv.x;
			Xuv.y += 0.5;
			Zuv.x += 0.5;
	vec4 	X = texture(tex, Xuv)*k.x;
	vec4 	Y = texture(tex, Yuv)*k.y;
	vec4 	Z = texture(tex, Zuv)*k.z;
	return 	(X+Y+Z)/(k.x+k.y+k.z);
}

void 	parallax(inout material mate, inout geometry geom){

	vec3	V 	= normalize(jit_in.transTBN * (eye - jit_in.pos));		//tangent view direction
	//compute texture coordinates ratio
	float uvRatio = jit_in.texRepeat.x / jit_in.texRepeat.y; 
	V.x *= uvRatio;

   	// determine optimal number of layers
   	float numLayers = mix(parallaxIterations.x, parallaxIterations.y, abs(dot(vec3(0, 0, 1), V)));

   	// height of each layer
   	float layerHeight = 1.0 / numLayers;
   	// current depth of the layer
   	float curLayerHeight = 0;
   	// shift of texture coordinates for each layer
   	vec2 dtex = heightScale * V.xy / V.z / numLayers;

   	// current texture coordinates
   	vec2 currentTextureCoords = geom.uv;

  	// depth from heightmap
   	float heightFromTexture = mate.height;

   	// while point is above the surface
   	while(heightFromTexture > curLayerHeight) 
   	{
      	// to the next layer
      	curLayerHeight += layerHeight; 
      	// shift of texture coordinates
      	currentTextureCoords -= dtex;
      	// new depth from heightmap
      	heightFromTexture = 1. - texture(RMOHTex, currentTextureCoords).a;
   	}

   	///////////////////////////////////////////////////////////

   	// previous texture coordinates
   	vec2 prevTCoords = currentTextureCoords + dtex;

   	// heights for linear interpolation
   	float nextH = heightFromTexture - curLayerHeight;
   	float prevH = 1. - texture(RMOHTex, prevTCoords).a
                           - curLayerHeight + layerHeight;

   	// proportions for linear interpolation
   	float weight = nextH / (nextH - prevH);

   	// interpolation of texture coordinates
   	geom.uv = mix(currentTextureCoords, prevTCoords, vec2(weight));
   	mate.height = curLayerHeight + mix(nextH, prevH, weight);
   	if(geom.uv.x > jit_in.texRepeat.x || geom.uv.y > jit_in.texRepeat.y || geom.uv.x < 0.0 || geom.uv.y < 0.0){discard; }
}
float 	shadow(vec3 L, vec3 N, vec2 initialTexCoord, float initialHeight){

   // calculate lighting only for surface oriented to the light source
   float NdotL = dot(N, L);
   if(NdotL < 0.0) {return 0.;}

    // calculate initial parameters
    float numSamplesUnderSurface = 0.;
    float shadowMultiplier = 0.;
    float numLayers = mix(shadowIterations.x, shadowIterations.y, abs(NdotL));
    float layerHeight = initialHeight / numLayers;
    vec2 texStep = heightScale * L.xy / L.z / numLayers;

    // current parameters
    float currentLayerHeight = initialHeight - layerHeight;
    vec2 currentTextureCoords = initialTexCoord + texStep;
    float heightFromTexture = 1. - texture(RMOHTex, currentTextureCoords).a;
    float stepIndex = 1.;

    //int count = 0;

    // while point is below depth 0.0 )
    while(currentLayerHeight > 0.){

        // if point is under the surface
        if(heightFromTexture < currentLayerHeight){

            // calculate partial shadowing factor
            numSamplesUnderSurface += 1.;
            float newShadowMultiplier = (currentLayerHeight  - heightFromTexture)*(1.0 - stepIndex / numLayers);
            shadowMultiplier = max(shadowMultiplier, newShadowMultiplier);
        }

        // offset to the next layer
        stepIndex += 1.;
        currentLayerHeight -= layerHeight;
        currentTextureCoords += texStep;
        heightFromTexture = 1. - texture(RMOHTex, currentTextureCoords).a;
        //count += 1;
    }
    shadowMultiplier *= shadowAmount;
    // Shadowing factor should be 1 if there were no points under the surface
    return (numSamplesUnderSurface <= 1.) ? 1. : 1. - saturate(shadowMultiplier);
    //return abs(NdotL);
}
//PBR functions
vec3 	fresnelSchlickRoughness(float HdotV, vec3 F0, float rou){
	float 	x = saturate(1. - HdotV); //x^5
	float 	x2 = x*x;
			x2 *= x2;
			x *= x2;
    return F0 + (max(vec3(1.0 - rou), F0) - F0) * x;
} 
float 	DistributionGGX(float NdotH, float rou){
			rou *= rou; //Disney trick!
			rou *= rou; //roughness^4
     		NdotH *= NdotH; //square the dot product
    float 	denom = (NdotH * (rou - 1.0) + 1.0);
    		denom *= denom;
    		denom *= PI;
	
    return 	rou / denom;
}
float 	GeometrySchlickGGX(float NdotV, float rou){
			rou += 1.;
    float 	k = (rou*rou) / 8.0; //Disney trick again...
    return NdotV / ( NdotV * (1.0 - k) + k );
}
float 	GeometrySmith(float NdotV, float NdotL, float rou){
    float ggx2  = GeometrySchlickGGX(NdotV, rou);
    float ggx1  = GeometrySchlickGGX(NdotL, rou);
	
    return ggx1 * ggx2;
} 
vec3 	getRadiance(vec3 V, vec3 N, vec3 L, vec3 rad, vec3 pos, in material mate){

	vec3	H = normalize(V + L);					//half vector

	//compute dot products
	float	HdotV = saturate(dot(H, V));
    float 	NdotV = saturate(dot(N, V)) + 0.001; //avoid dividing by 0
    float 	NdotL = saturate(dot(N, L));
    float   NdotH = saturate(dot(N, H));

	vec3 	F  	= fresnelSchlickRoughness(HdotV, mate.F0, mate.rou); 		//compute fresnel
	float	NDF = DistributionGGX(NdotH, mate.rou);   	//compute NDF term
	float 	G   = GeometrySmith(NdotV, NdotL, mate.rou); //compute G term   
	vec3 	spe = (NDF*G*F)/(4.*NdotV*NdotL+0.0001);  

	vec3 	kS = F;					//k specular
	vec3 	kD = vec3(1.0) - kS;	//k diffuse
			kD *= 1.0 - mate.met;		//nullify k diffuse if metallic

	return 	(kD * mate.alb * PI_INV + spe) * rad * NdotL;
}

//lighting functions		
vec3	getPointLight(in light lig, in material mate, in geometry geom){
		
	vec3	ligMinPos 	= lig.ligPos - geom.pos;
	float	ligDis 		= length(ligMinPos);	
	vec3	L 			= ligMinPos/ligDis;				//light direction
	vec3	rad 		= lig.ligCol / (1. + ligDis*ligDis);						//radiance
	vec3	tanLigDir 	= normalize(jit_in.transTBN * ligMinPos);	//light pos in tangent space
	bool	compute 	= rad.x+rad.y+rad.z > 0.05;
	return  compute ? 	( selfShadowing == 1. ? shadow(tanLigDir, geom.tanN, geom.uv, mate.height) : 1.) * 
						getRadiance(geom.V, geom.N, L, rad, geom.pos, mate) :
						vec3(0.); //get radiance for this light
}	
vec3	getDirectionalLight(in light lig, in material mate, in geometry geom){
	
	vec3	tanLigDir 	= normalize(jit_in.transTBN * lig.ligDir);	//light pos in tangent space
	return  ( selfShadowing == 1. ? shadow(tanLigDir, geom.tanN, geom.uv, mate.height) : 1.) * 
			getRadiance(geom.V, geom.N, lig.ligDir, lig.ligCol, geom.pos, mate); //get radiance for this light
}
vec3  	getSpotLight(in light lig, in material mate, in geometry geom){

	vec3 pointLigDir = normalize(lig.ligPos - geom.pos);
	float theta = dot(pointLigDir, -lig.ligDir);
	float epsilon   = lig.cutoffInner - lig.cutoffOuter;
	float intensity = saturate((theta - lig.cutoffOuter) / epsilon);  
	return theta < lig.cutoffOuter ? getPointLight(lig, mate, geom)*intensity : vec3(0.);
}	
vec2 	dir2uv(vec3 v){
    vec2 uv = vec2(atan(v.z, v.x), asin(v.y));
    uv *= vec2(-0.1591, 0.3183); //to invert atan
    uv += 0.5;
    return uv;
}
vec3  	getIBL(in material mate, in geometry geom){

	float	NdotV = max(dot(geom.N, geom.V), 0.);
	vec3 	kS = fresnelSchlickRoughness(NdotV, mate.F0, mate.rou);
	vec3 	kD = vec3(1.) - kS;
			kD *= 1. - mate.met;
	vec3 	irradiance = texture(irradianceTex, geom.N).rgb;
	vec3	diffuse = irradiance * mate.alb * kD;

	float 	lod             	= mate.rou*15.;
	vec3	ref 				= reflect(-geom.V, geom.N);
	vec3 	prefilteredColor 	= textureLod(equirectTex, dir2uv(ref), lod).rgb;
	vec2 	envBRDF          	= texture(integMap, vec2(NdotV, mate.rou)).xy;
 	vec3 	specular 			= prefilteredColor * (kS * envBRDF.x + envBRDF.y); 

	return 	(diffuse + specular) * mate.occ; 
}

//area light functions
float 	rectSolidAngle(vec3 v0, vec3 v1, vec3 v2, vec3 v3){
	// Based on the technique in EA's frostbite engine
    vec3 n0 = normalize(cross(v0, v1));
    vec3 n1 = normalize(cross(v1, v2));
    vec3 n2 = normalize(cross(v2, v3));
    vec3 n3 = normalize(cross(v3, v0));
    
    float g0 = acos(dot(-n0, n1));
	float g1 = acos(dot(-n1, n2));
	float g2 = acos(dot(-n2, n3));
	float g3 = acos(dot(-n3, n0));
    
    return g0 + g1 + g2 + g3 - TWOPI; 
}
float 	normalDistributionGGXRect(float NdotH, float alpha, float alphaPrime){
    float 	alpha2 		= alpha * alpha;
    float 	alpha4 		= alpha2 * alpha2;
    float 	alphaPrime3 = alphaPrime * alphaPrime * alphaPrime;
    float 	denom 		= NdotH * NdotH * (alpha2 - 1.) + 1.;
    
    return 	(alpha2 * alphaPrime3) / (denom * denom);   
}
vec3 	rayPlaneIntersect(vec3 ro, vec3 rd, vec3 ligDir, vec3 ligPos){

	float a = dot(ligDir, rd);
    return a == 0. ? ro + rd * (dot(ligDir, ligPos - ro) / a) : vec3(ro + rd*1000);
}
vec3 	getRectLight(in light lig, in material mate, in geometry geom){
    
	//fill light parameters
	vec3	right 			= cross(lig.ligDir, vec3(0., 1., 0.));
	vec3	up 				= cross(right, lig.ligDir);
	float 	halfWidth 		= lig.width  * 0.5;
	float 	halfHeight 		= lig.height * 0.5;
	vec3 	halfRight 		= halfWidth*right;
	vec3 	halfUp 			= halfHeight*up;
    vec3	p0 				= lig.ligPos + halfRight + halfUp;
    vec3	p1 				= lig.ligPos - halfRight + halfUp;;
    vec3	p2 				= lig.ligPos - halfRight - halfUp;;
    vec3	p3 				= lig.ligPos + halfRight - halfUp;;
   	vec3	p0_P 			= p0 - geom.pos;
   	vec3	p1_P 			= p1 - geom.pos;
   	vec3	p2_P 			= p2 - geom.pos;
   	vec3	p3_P 			= p3 - geom.pos;
   	vec3	pos_P 			= lig.ligPos - geom.pos;

    // facing side check
    float 	windingCheck =  lig.twoSided ? -1. : dot(cross(right, up), lig.ligPos - geom.pos);
    if (windingCheck > 0.){return vec3(0.);}
    
    float 	solidAngle = rectSolidAngle(p0_P, p1_P, p2_P, p3_P);
    
    // diffuse (NdotL)
    float 	NdotL = solidAngle * 0.2 * (
        	saturate(dot(normalize(p0_P), geom.N)) +
        	saturate(dot(normalize(p1_P), geom.N)) +
        	saturate(dot(normalize(p2_P), geom.N)) +
        	saturate(dot(normalize(p3_P), geom.N)) +
        	saturate(dot(normalize(pos_P), geom.N)));    
    // Crude hack for diffuse.
    // Average normal and inversed emitter direction to create
    // a vector W that points towards the light.
    //vec3 W = normalize(geom.N + lig.ligDir); 
   // 	NdotL = saturate(dot(geom.N, W))*solidAngle;

    // specular
    		//get ray-plane intersection
    float 	LdotR = dot(lig.ligDir, geom.R);
    vec3 	planePointCenter 	= geom.pos + geom.R * ( dot(lig.ligDir, lig.ligPos - geom.pos) / LdotR );
    		planePointCenter 	-= lig.ligPos;
    		LdotR = abs(LdotR) - LdotR; //this factor cancels out the weird looking reflections
    		// project point on the plane on which the rectangle lies
    vec2 	planePointProj 		= vec2(	dot(planePointCenter, right), 
                               			dot(planePointCenter, up)
                               			);

    vec2 	c = min(abs(planePointProj), vec2(halfWidth, halfHeight)) * sign(planePointProj);

    vec3 	L = lig.ligPos + right * c.x + up * c.y;    
    		L -= geom.pos;
    vec3 	l 			= normalize(L);
    vec3 	h 			= normalize(geom.V + l);
    float 	lightDist 	= length(L);
    
    float 	NdotH = max(dot(geom.N, h), 0.);
    float 	HdotV = dot(h, geom.V);
    float 	NdotV = max(dot(geom.N, geom.V), 0.) + 0.001;

    float 	alpha 		= mate.rou * mate.rou;
    //float 	alphaPrime 	= saturate(alpha + (RECT_LIGHT_RADIUS / (2. * lightDist)));
    float 	alphaPrime 	= saturate(alpha + (lig.width*lig.height / (2. * lightDist)));
    //float 	alphaPrime 	= saturate(1. / (1. + lightDist * lightDist));

	vec3 	F  			= fresnelSchlickRoughness(HdotV, mate.F0, mate.rou); 		//compute fresnel
    vec3 	result 		= normalDistributionGGXRect(NdotH, alpha, alphaPrime)
        				* GeometrySmith(NdotV, NdotL, mate.rou)
        				* F;

	vec3 	kD = vec3(1.) - F;//rectLightFresnel;
        	kD *= 1. - mate.met;
        
    return 	(kD * PI_INV * mate.alb + result*LdotR) * NdotL * lig.ligCol;   
}
vec3 	getRectLightTextured(in light lig, in material mate, in geometry geom){
    
	//fill light parameters
	vec3	right 			= cross(lig.ligDir, vec3(0., 1., 0.));
	vec3	up 				= cross(right, lig.ligDir);
	float 	halfWidth 		= lig.width  * 0.5;
	float 	halfHeight 		= lig.height * 0.5;
	vec3 	halfRight 		= halfWidth*right;
	vec3 	halfUp 			= halfHeight*up;
    vec3	p0 				= lig.ligPos + halfRight + halfUp;
    vec3	p1 				= lig.ligPos - halfRight + halfUp;;
    vec3	p2 				= lig.ligPos - halfRight - halfUp;;
    vec3	p3 				= lig.ligPos + halfRight - halfUp;;
   	vec3	p0_P 			= p0 - geom.pos;
   	vec3	p1_P 			= p1 - geom.pos;
   	vec3	p2_P 			= p2 - geom.pos;
   	vec3	p3_P 			= p3 - geom.pos;
   	vec3	pos_P 			= lig.ligPos - geom.pos;

    // facing side check
    float 	windingCheck =  lig.twoSided ? -1. : dot(cross(right, up), lig.ligPos - geom.pos);
    if (windingCheck > 0.){return vec3(0.);}
    
    float 	solidAngle = rectSolidAngle(p0_P, p1_P, p2_P, p3_P);
    
    // diffuse (NdotL)
    float 	NdotL = solidAngle * 0.2 * (
        	saturate(dot(normalize(p0_P), geom.N)) +
        	saturate(dot(normalize(p1_P), geom.N)) +
        	saturate(dot(normalize(p2_P), geom.N)) +
        	saturate(dot(normalize(p3_P), geom.N)) +
        	saturate(dot(normalize(pos_P), geom.N)));    
    // Crude hack for diffuse.
    // Average normal and inversed emitter direction to create
    // a vector W that points towards the light.
    //vec3 W = normalize(geom.N + lig.ligDir); 
   // 	NdotL = saturate(dot(geom.N, W))*solidAngle;

    // specular
    		//get ray-plane intersection
    float 	LdotR = dot(lig.ligDir, geom.R);
    vec3 	planePointCenter 	= geom.pos + geom.R * ( dot(lig.ligDir, lig.ligPos - geom.pos) / LdotR );
    		planePointCenter 	-= lig.ligPos;
    		LdotR = abs(LdotR) - LdotR; //this factor cancels out the weird looking reflections
    		// project point on the plane on which the rectangle lies
    vec2 	planePointProj 		= vec2(	dot(planePointCenter, right), 
                               			dot(planePointCenter, up)
                               			);

    vec2 	c = min(abs(planePointProj), vec2(halfWidth, halfHeight)) * sign(planePointProj);
    // calculate light uv
    vec2 luv = vec2(c.x, -c.y) / vec2(lig.width, lig.height) + 0.5;

    vec3 	L = lig.ligPos + right * c.x + up * c.y;    
    		L -= geom.pos;
    vec3 	l 			= normalize(L);
    vec3 	h 			= normalize(geom.V + l);
    float 	lightDist 	= length(L);
    
    float 	NdotH = max(dot(geom.N, h), 0.);
    float 	HdotV = dot(h, geom.V);
    float 	NdotV = max(dot(geom.N, geom.V), 0.) + 0.001;

    float 	alpha 		= mate.rou * mate.rou;
    float 	alphaPrime 	= saturate(alpha + (RECT_LIGHT_RADIUS / (2. * lightDist)));
    //float 	alphaPrime 	= saturate(alpha + (lig.width*lig.height / (2. * lightDist)));
    //float 	alphaPrime 	= saturate(1. / (1. + lightDist * lightDist));
    
    // calculate approx light diffuse and specular colors (super experimental :p) 
    //float 	difLod = 	pow(exp(lightDist + .5), 2.);
    vec3 	difCol = 	textureLod(rectLightTex, vec2(0.5, 0.5), 8.).rgb;
    /*
    vec3 	difCol = 	textureLod(rectLightTex, vec2(0.0, 0.0), 3.).rgb + 
    					textureLod(rectLightTex, vec2(1.0, 0.0), 3.).rgb + 
    					textureLod(rectLightTex, vec2(0.0, 1.0), 3.).rgb + 
    					textureLod(rectLightTex, vec2(1.0, 1.0), 3.).rgb + 
    					textureLod(rectLightTex, vec2(0.5, 0.5), 3.).rgb;

    		difCol *= 0.2;
    */
    float 	speLod = (lightDist + 1.) * (mate.rou + 1.) * 1.5;
    		//speLod += abs(luv.x - 0.5)*2. * 2.;
    		//speLod += abs(luv.y - 0.5)*2. * 2.;
    vec3 	speCol = textureLod(rectLightTex, luv, speLod).rgb;
    		//speCol = mix(speCol, difCol, vec3(saturate(lightDist*0.5*(mate.rou + 1.))));

	vec3 	F  			= fresnelSchlickRoughness(HdotV, mate.F0, mate.rou); 		//compute fresnel
    vec3 	result 		= normalDistributionGGXRect(NdotH, alpha, alphaPrime)
        				* GeometrySmith(NdotV, NdotL, mate.rou)
        				* F;

	vec3 	kD = vec3(1.) - F;//rectLightFresnel;
        	kD *= 1. - mate.met;
        
    return 	(kD * PI_INV * mate.alb*difCol + result*LdotR*speCol) * NdotL;   
}
void  	fillStructuresFromTextures(inout material mate, inout geometry geom){

	bool	triplanarTexturing = triplanarUV == 1.;

			geom.uv 	= jit_in.uv;
			geom.pos  	= jit_in.pos;
			mate.height = 1. - (triplanarTexturing ? triplanar(RMOHTex).w : texture(RMOHTex, geom.uv).w);

	if(parallaxMapping == 1.){parallax(mate, geom);}	//texture coordinates
	
	vec4	RMOH 		= triplanarTexturing ? triplanar(RMOHTex) 			: texture(RMOHTex, geom.uv);	
			mate.alb 	= triplanarTexturing ? triplanar(albedoTex).rgb 	: texture(albedoTex, geom.uv).rgb;	
			mate.rou 	= RMOH.r;	//roughness
			mate.met 	= RMOH.g;	//metallic
			mate.occ 	= RMOH.b;	//ambient occlusion
			mate.F0 	= mix(vec3(0.04), mate.alb, vec3(mate.met)); 						//use alb as F0 if metallic

			geom.V 		= normalize(eye - jit_in.pos);	//view direction
			geom.tanN 	= normalize((triplanarTexturing ? triplanar(normalTex) : texture(normalTex, geom.uv) ).rgb*2. - 1.);
			geom.N 		= normalize(jit_in.TBN * geom.tanN);
			geom.R 		= reflect(geom.V, geom.N);
			geom.pos    += geom.N * (1. - mate.height) * heightScale;
}
void  	fillStructuresFromUniform(inout material mate, inout geometry geom){

			geom.uv 	= jit_in.uv;
			geom.pos  	= jit_in.pos;
			mate.height = 1.;
	
			mate.alb 	= albedo;	
			mate.rou 	= roughness;	//roughness
			mate.met 	= metalness;	//metallic
			mate.occ 	= 1.;	//ambient occlusion
			mate.F0 	= mix(vec3(0.04), albedo, vec3(metalness)); 			//use alb as F0 if metallic

			geom.V 		= normalize(eye - jit_in.pos);	//view direction
			geom.tanN 	= vec3(0., 0., 1.);
			geom.N 		= normalize(jit_in.TBN * geom.tanN);
			geom.R 		= reflect(geom.V, geom.N);
}
vec3 	gammaCorrection(vec3 x){
	x /= x + vec3(1.);  //from HDI lo LDI
	//lin = ACES(lin);
	return lin2sRGB(x);	//gamma correction
}
void 	main() {

	material 	mate;
	geometry 	geom;
	light 		lig;

	//fill structures

	fillStructuresFromTextures(mate, geom);
	//fillStructuresFromUniform(mate, geom);

	//lighting
	col.rgb = vec3(0.); //initialize the out color 

	{
		lig.ligPos		= vec3(1., 3., 0.);					//light position
		lig.ligCol 		= vec3(1.)*9.;
		col.rgb 		+= getPointLight(lig, mate, geom);
	}
	{
		lig.ligPos		= vec3(-2., 1., -1.);				//light position
		lig.ligCol 		= vec3(0.8, 0.5, 0.1)*9.;
		col.rgb 		+= getPointLight(lig, mate, geom);
	}
	{
		lig.ligPos		= vec3(2., -0.5, 1.);				//light position
		lig.ligCol 		= vec3(0.1, 0.5, 0.9)*9.;
		col.rgb 		+= getPointLight(lig, mate, geom);
	}
	{
		lig.ligPos		= vec3(-2., -1., -2.);				//light position
		lig.ligCol 		= vec3(1.)*9.;	
		col.rgb 		+= getPointLight(lig, mate, geom);
	}
/*
	{
		lig.ligDir 		= normalize(vec3(0., 1., 0.));		//light direction
		lig.ligCol 		= vec3(1.)*9.;	
		col.rgb 		+= getDirectionalLight(lig, mate, geom);
	}

	{
		lig.ligPos 		= vec3(0., 2., 0.);
		lig.ligDir 		= vec3(0., 1., 0.);		//light direction
		lig.ligCol 		= vec3(1., 0.1, 0.2)*8.;	
		lig.cutoffInner = -0.7;
		lig.cutoffOuter = -0.5;
		col.rgb 		+= getSpotLight(lig, mate, geom);
	}
*/
	{
		lig.ligPos 		= vec3(3., 0.5, 0.);
		lig.ligDir 		= vec3(1., 0., 0.);//vec3(0., 0., -1.);
		lig.ligCol 		= vec3(0.1, 0.4, 0.7)*10.;
		lig.width 		= 1.;
		lig.height 		= 2.;
		lig.twoSided 	= false;
		col.rgb 		+= getRectLight(lig, mate, geom);
	}

	{
		lig.ligPos 		= vec3(-3., 0.5, 0.);
		lig.ligDir 		= vec3(-1., 0., 0.);
		lig.ligCol 		= vec3(0.7, 0.4, 0.1)*10.;
		lig.width 		= 1.;
		lig.height 		= 2.;
		lig.twoSided 	= false;
		col.rgb 		+= getRectLight(lig, mate, geom);
	}
	{
		lig.ligPos 		= vec3(0., 0.5, -3.);
		lig.ligDir 		= vec3(0., 0., -1.);
		lig.ligCol 		= vec3(1.);
		lig.width 		= 3.;
		lig.height 		= 2.;
		lig.twoSided 	= false;
		col.rgb 		+= getRectLightTextured(lig, mate, geom);
	}


	{
		col.rgb 		+= getIBL(mate, geom); 
	}

	col.rgb = gammaCorrection(col.rgb);
	col.a = 1.;

}	
]]>
		</program>
	</language>
</jittershader>