<jittershader name="default">
	<description>Default Slab </description>
	<param name="rect" type="int" default="0" />
	<param name="MVP" type="mat4" state="MODELVIEW_PROJECTION_MATRIX" />
	<param name="pos" type="vec3" state="POSITION" />
	<param name="uv" type="vec2" state="TEXCOORD" />
	<language name="glsl" version="1.5">
		<bind param="rect" program="fp" />
		<bind param="MVP" program="vp" />
		<bind param="pos" program="vp" />
		<bind param="uv" program="vp" />
		<program name="vp" type="vertex"  >
		<![CDATA[
			#version 330 core
			
			in vec3 pos;
			in vec2 uv;
			out jit_PerVertex {
				vec2 uv;
			} jit_out;
			uniform mat4 MVP;
			
			void main(void) {
				gl_Position = MVP*vec4(pos, 1.);
				jit_out.uv = vec2(uv.x, 1. - uv.y);
			}
		]]>
		</program>
		
<program name="fp" type="fragment"  >
<![CDATA[
	#version 330 core
	#define PI 3.14159265
	
	in jit_PerVertex {
		vec2 uv;
	} jit_in;
	layout (location = 0) out vec4 outColor;
	
	uniform sampler2D rect;

vec2 dir2uv(vec3 v)
{
    vec2 uv = vec2(atan(v.z, v.x), asin(v.y));
    uv *= vec2(-0.1591, 0.3183); //to invert atan
    uv += 0.5;
    return uv;
}

vec3 equi2car(vec2 uv){

	float phi = uv.x*PI*2;
	float theta   = uv.y*PI;
	float x = sin(theta)*cos(phi);
	float y = sin(theta)*sin(phi);
	float z = cos(theta);
	return vec3(x, y, z);
}
vec3 hash3( float n ) { return (fract(sin(vec3(n,n+1.0,n+2.0))*43758.5453123) - 0.5)*0.02; }
vec4 getIrradiance(vec2 uv){

	vec3 dir = equi2car(uv);
	vec3 irradiance = vec3(0.0);  

	vec3 	up    = vec3(0.0, 1.0, 0.0);
	vec3 	right = normalize(cross(up, dir));
			up    = normalize(cross(dir, right));

	float sampleDelta = 0.004;//0.25;
	float nrSamples = 0.0; 
	for(float phi = 0.0; phi < (2.0 * PI); phi += sampleDelta){
	    for(float theta = 0.0; theta < (0.5 * PI); theta += sampleDelta){
	    	vec3 jit = hash3(nrSamples);
	        // spherical to cartesian (in tangent space)
	        vec3 tangentSample = vec3(sin(theta)*cos(phi), sin(theta)*sin(phi), cos(theta));
	        //tangentSample += jit;
	        // tangent space to world
	        vec3 sampleVec = tangentSample.x * right + tangentSample.y * up + tangentSample.z * dir;
	        sampleVec = normalize(sampleVec);//normalize because of the jittering
	        vec2 uv = dir2uv(sampleVec);

	        irradiance += texture(rect, uv).rgb * cos(theta) * sin(theta);
	        nrSamples += 1.;
	    }
	}
	return vec4( PI * irradiance * (1.0 / float(nrSamples)), 1.);
}

void main(void) {

	outColor = getIrradiance(jit_in.uv);

}
]]>
</program>
</language>
</jittershader>
