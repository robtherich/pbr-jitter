<jittershader name="textureCube:1-fill-flat-triangles">
	<description>
		An auto-generated shader for simulating deprecated OpenGL features in OpenGL 3.2+
	</description>
	<param name="level" type="float" default="0" />
	<param name="position" type="vec3" state="POSITION" />
	<param name="texcoord" type="vec2" state="TEXCOORD" />
	<param name="tex0" type="int" default="0" />
	<param name="textureMatrix0" type="mat4" state="TEXTURE0_MATRIX" />
	<param name="modelViewProjectionMatrix" type="mat4" state="MODELVIEW_PROJECTION_MATRIX" />
	<param name="modelViewMatrix" type="mat4" state="MODELVIEW_MATRIX" />
	<param name="normal" type="vec3" state="NORMAL" />
	<param name="color" type="vec4" state="COLOR" />
	<language name="glsl" version="1.5">
		<bind param="level" program="fp" />
		<bind param="position" program="vp" />
		<bind param="texcoord" program="vp" />
		<bind param="tex0" program="fp" />
		<bind param="textureMatrix0" program="vp" />
		<bind param="modelViewProjectionMatrix" program="vp" />
		<bind param="modelViewMatrix" program="vp" />
		<bind param="normal" program="vp" />
		<bind param="color" program="vp" />
		<program name="vp" type="vertex">
			<![CDATA[
// Preprocessor
#version 330 core

// Definitions


// Uniforms



uniform mat4 modelViewProjectionMatrix;
uniform mat4 modelViewMatrix;

uniform mat4 textureMatrix0;




// Attributes
in vec3 position;
in vec4 color;
in vec2 texcoord;

in vec3 normal;

// Output
out jit_PerVertex {
	flat vec4 color;
	vec2 texcoord0; 
	vec3 Vn;
	vec3 Nn;
	smooth vec3 pos;
} jit_out;


// Library functions



	
void main() {
	
	gl_Position = modelViewProjectionMatrix * vec4(position, 1.);	
	mat4 mvMatrix = modelViewMatrix;
	
	
	
	jit_out.color = color;
	
	vec3 eyePosition = (mvMatrix*vec4(position, 1.)).xyz;
	mat3 mv33 = mat3x3(mvMatrix);
	mv33[0] = normalize(mv33[0]);
	mv33[1] = normalize(mv33[1]);
	mv33[2] = normalize(mv33[2]);
	mat3 normalMatrix = transpose(inverse(mv33));
	vec3 Nn = normalMatrix*normalize(normal);
	jit_out.Vn = normalize(eyePosition);
	jit_out.Nn = Nn;
	jit_out.pos = position;
	
	
	jit_out.texcoord0 = vec2(textureMatrix0*vec4(texcoord, 0., 1.));
	
	
}


]]>
		</program>
		<program name="fp" type="fragment">
			<![CDATA[
#version 410 core

in jit_PerVertex {
	flat vec4 color;
	vec2 texcoord0; 
	vec3 Vn;
	vec3 Nn;
	smooth vec3 pos;
} jit_in;
out vec4 color;

uniform float level;
uniform samplerCube tex0;


void main() {
	color = jit_in.color;



	vec3 Reflect0 = reflect(jit_in.Vn, jit_in.Nn);
	color = textureLod(tex0, normalize(jit_in.pos), level);

}	

]]>
		</program>
	</language>
</jittershader>
