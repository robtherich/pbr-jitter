<jittershader name="alb-nor-RMO-env-ref-di-sh-ro-me-ao-he-gm">
	<description>
		An auto-generated PBR shader 
	</description>
	<param name="pos" type="vec3" state="POSITION" />
	<param name="nor" type="vec3" state="NORMAL" />
	<param name="tan" type="vec3" state="TANGENT" />
	<param name="uv" type="vec2" state="TEXCOORD" />
	<param name="MVP" type="mat4" state="MODELVIEW_PROJECTION_MATRIX" />
	<param name="prevMVP" type="mat4" state="PREV_MODELVIEW_PROJECTION_MATRIX" />
	<param name="MV" type="mat4" state="MODELVIEW_MATRIX" />
	<param name="M" type="mat4" state="WORLD_MATRIX" />
	<param name="NM" type="mat3" state="NORMAL_MATRIX" />
	<param name="Vmat" type="mat4" state="VIEW_MATRIX" />
	<param name="Pmat" type="mat4" state="PROJECTION_MATRIX" />
	<param name="eye" type="vec3" state="CAMERA_POSITION" />
	<param name="far" type="float" state="FAR_CLIP" />
	<param name="near" type="float" state="NEAR_CLIP" />
	<param name="PBRParameters" state="PBR" />
	<param name="roughness" type="float" default="0.3" />
	<param name="metalness" type="float" default="0.0" />
	<param name="texRepeat" type="vec2" default="1. 1." />
	<param name="heightScale" type="float" default="0.01" />
	<param name="triplanarBlendingAmount" type="float" default="0.7" />
	<param name="parallaxIterations" type="int" default="100" />
	<param name="parallaxStep" type="float" default="0.005" />
	<param name="shadowAmount" type="float" default="300." />
	<param name="shadowIterations" type="int" default="100" />
	<param name="shadowStep" type="float" default="0.001" />
	<param name="occlusionAmount" type="float" default="100." />
	<param name="occlusionIterations" type="int" default="5" />
	<param name="occlusionOffset" type="float" default="0.001" />
	<param name="albedoTex" type="int" default="0" />
	<param name="normalTex" type="int" default="1" />
	<param name="RMOHTex" type="int" default="2" />
	<param name="environmentTex" type="int" default="3" />
	<param name="reflectionTex" type="int" default="4" />
	<param name="integMap" type="int" default="6" />
	<texture file="ibl_brdf_lut.png" type="float16" unit="6" rectangle="0" filter="none none" wrap="repeat repeat" />
	<param name="vsm_params" type="vec3" default="0.005 0.00002 0.4" />
	<param name="shadowMap0" type="int" default="5" />
	<param name="jit_Light_VPMAT0" type="mat4" state="LIGHT_VIEWPROJ_MATRIX0" />
	<param name="jit_Light_RANGE0" type="float" state="LIGHT_RANGE0" />
	<language name="glsl" version="1.5">
		<bind param="pos" program="vp" />
		<bind param="nor" program="vp" />
		<bind param="tan" program="vp" />
		<bind param="uv" program="vp" />
		<bind param="MVP" program="vp" />
		<bind param="prevMVP" program="vp" />
		<bind param="MV" program="vp" />
		<bind param="M" program="vp" />
		<bind param="M" program="fp" />
		<bind param="NM" program="vp" />
		<bind param="Vmat" program="fp" />
		<bind param="Pmat" program="fp" />
		<bind param="eye" program="fp" />
		<bind param="far" program="fp" />
		<bind param="near" program="fp" />
		<bind param="PBRParameters" program="fp" />
		<bind param="roughness" program="fp" />
		<bind param="metalness" program="fp" />
		<bind param="texRepeat" program="vp" />
		<bind param="texRepeat" program="fp" />
		<bind param="heightScale" program="fp" />
		<bind param="triplanarBlendingAmount" program="fp" />
		<bind param="parallaxIterations" program="fp" />
		<bind param="parallaxStep" program="fp" />
		<bind param="shadowAmount" program="fp" />
		<bind param="shadowIterations" program="fp" />
		<bind param="shadowStep" program="fp" />
		<bind param="occlusionAmount" program="fp" />
		<bind param="occlusionIterations" program="fp" />
		<bind param="occlusionOffset" program="fp" />
		<bind param="albedoTex" program="fp" />
		<bind param="normalTex" program="fp" />
		<bind param="RMOHTex" program="fp" />
		<bind param="environmentTex" program="fp" />
		<bind param="reflectionTex" program="fp" />
		<bind param="integMap" program="fp" />
		<bind param="vsm_params" program="fp" />
		<bind param="shadowMap0" program="fp" />
		<bind param="jit_Light_VPMAT0" program="vp" />
		<bind param="jit_Light_RANGE0" program="fp" />
		<program name="vp" type="vertex">
			<![CDATA[
#version 330 core
uniform mat4 MVP, MV, M, prevMVP;
uniform mat3 NM;
uniform vec2 texRepeat;
in vec3 pos, nor, tan;
in vec2 uv;


out jit_PerVertex {	
	smooth 	vec3 nor;
	smooth 	vec3 tan;
	smooth 	vec3 bit;
	smooth 	vec3 pos;
	smooth 	vec2 uv;
	smooth 	vec3 eyePos;
	smooth  vec3 modelPos;
	smooth  vec3 modelNor;
	smooth  mat3 TBN;
	smooth  mat3 transTBN;
	smooth  vec4 currPos;
	smooth  vec4 prevPos;
} jit_out;


uniform mat4 jit_Light_VPMAT0;
out jit_PerVertexShadow {
	smooth vec4 jit_Surface_position_ls0;
} jit_shadow_out;	


void main() {
	jit_out.currPos = MVP * vec4(pos, 1.);	
	jit_out.prevPos = prevMVP * vec4(pos, 1.);	
	gl_Position = jit_out.currPos;
	mat4 MM = M;	
	jit_out.nor = (MM * vec4(nor, 0.)).xyz;
	jit_out.tan = (MM * vec4(tan, 0.)).xyz;
	jit_out.bit = cross(jit_out.tan, jit_out.nor);
	jit_out.pos = (MM * vec4(pos, 1.)).xyz;
	jit_out.uv = uv * texRepeat;
	jit_out.eyePos = (MV * vec4(pos, 1.)).xyz;
	jit_out.modelPos = pos;
	jit_out.modelNor = nor;
	jit_out.TBN = mat3(jit_out.tan, jit_out.bit, jit_out.nor);
	jit_out.transTBN = transpose(jit_out.TBN);
	
	jit_shadow_out.jit_Surface_position_ls0 = jit_Light_VPMAT0*vec4(jit_out.pos.xyz, 1.0);

}

]]>
		</program>
		<program name="fp" type="fragment">
			<![CDATA[
#version 330 core
#define JIT_PBR_IBL_REFLECTION
#define JIT_PBR_SELF_SHADOW
#line 1
vec2 sphere_map(vec3 v) {
	float m = 2.*sqrt(v.x*v.x + v.y*v.y + (v.z+1.)*(v.z+1.));
	return vec2(v)/m+0.5;
}

// Shadows 
vec4 btex2D(sampler2D map, vec2 uv, float radius, float steps) {
	float stepSize = 2.0 * radius / steps;
	uv.xy -= vec2(radius,radius);
	vec4 total = vec4(0, 0, 0, 0);
	for (int x = 0; x < steps; ++x)
		for (int y = 0; y < steps; ++y)
			total += textureJit(map, vec2(uv.xy + vec2(x * stepSize, y * stepSize)));
	return total / (steps * steps);
}
float compute_shadow(sampler2D shadowMap, vec4 shadowMapPos, float ourDepth, vec3 param)	{				
	// param.x = radius
	// param.y = epsilon
	// param.z = min clamp
	vec2 suv = (shadowMapPos.xy / shadowMapPos.w) * 0.5 + 0.5;
	vec2 moments = btex2D(shadowMap, suv, param.x, 4).xy;
	float litFactor = (ourDepth <= moments.x ? 1 : 0);
	float variance = clamp((moments.y - (moments.x*moments.x)), param.y, 1.0);
	float m_d = moments.x - ourDepth;
	float p = variance / (variance + m_d * m_d);
	return smoothstep(param.z, 1.0, max(litFactor, p));
}
#define PI 3.14159265
#define TWOPI 6.28318531
#define PI_INV 0.3183098861

uniform sampler2D albedoTex, normalTex, RMOHTex, emissionTex, rectLightTex, integMap;
uniform samplerCube environmentTex, reflectionTex;
uniform int shadowIterations, parallaxIterations, occlusionIterations; 
uniform float heightScale, triplanarBlendingAmount;
uniform float shadowAmount, shadowStep, parallaxStep;
uniform float occlusionAmount, occlusionOffset;
uniform float roughness, metalness;
uniform float near, far;
uniform vec2 texRepeat;
uniform vec3 eye;
uniform mat4 Vmat, Pmat, M;

// shadow params
uniform vec3 vsm_params;

struct PBRMaterialParameters {
	vec4 diffuse;
	vec4 emission;
};

struct PBRLightSourceParameters {
	vec4 color;
	vec4 ambient;
	vec4 position;
	vec3 spotDir;
	float spotExponent;
	float spotCosCutoff;
	float constAtten;
	float linAtten;
	float quadAtten;
};

struct 	material{
	vec3 	alb;
	float 	occ;
	float 	met;
	float 	rou;
	vec3 	F0;
};

struct 	geometry{
	vec3	V;
	vec3	N;
	vec3 	R;
	vec3	pos;
	vec2	uv;
	float 	height;	

	//common triplanar params
	vec2 	uvX, uvY, uvZ;
	vec3 	triBlend;
	float 	triBlendNormalizer;	
};

in jit_PerVertex {
	smooth 	vec3 nor;
	smooth 	vec3 tan;
	smooth 	vec3 bit;
	smooth 	vec3 pos;
	smooth 	vec2 uv;
	smooth  vec3 eyePos;
	smooth  vec3 modelPos;
	smooth  vec3 modelNor;
	smooth  mat3 TBN;
	smooth  mat3 transTBN;
	smooth  vec4 currPos;
	smooth  vec4 prevPos;
} jit_in;
//PBR common functions

//utilities
vec3 	lin2sRGB(vec3 x){ return pow(x, vec3(0.4545454545));}
vec3 	sRGB2lin(vec3 x){ return pow(x, vec3(2.2));}
float 	saturate(float x){ return clamp(x, 0., 1.);}

//biplanar mapping
// from Inigo Quilez implementation:
//https://iquilezles.org/www/articles/biplanar/biplanar.htm
vec4 biplanar( sampler2D tex, in geometry geom )
{
    // grab coord derivatives for texturing
    vec3 p = jit_in.modelPos;
    vec3 dpdx = dFdx(p);
    vec3 dpdy = dFdy(p);
    vec3 n = abs(jit_in.modelNor);

    // determine major axis (in x; yz are following axis)
    ivec3 ma = (n.x>n.y && n.x>n.z) ? ivec3(0,1,2) :
               (n.y>n.z)            ? ivec3(1,2,0) :
                                      ivec3(2,0,1) ;
    // determine minor axis (in x; yz are following axis)
    ivec3 mi = (n.x<n.y && n.x<n.z) ? ivec3(0,1,2) :
               (n.y<n.z)            ? ivec3(1,2,0) :
                                      ivec3(2,0,1) ;
    // determine median axis (in x;  yz are following axis)
    ivec3 me = ivec3(3) - mi - ma;
    
    // project+fetch
    vec4 x = textureGrad( tex, vec2(   p[ma.y],   p[ma.z]), 
                               vec2(dpdx[ma.y],dpdx[ma.z]), 
                               vec2(dpdy[ma.y],dpdy[ma.z]) );
    vec4 y = textureGrad( tex, vec2(   p[me.y],   p[me.z]), 
                               vec2(dpdx[me.y],dpdx[me.z]),
                               vec2(dpdy[me.y],dpdy[me.z]) );
    
    // blend factors
    vec2 w = vec2(n[ma.x],n[me.x]);
    // make local support
    w = clamp( (w-0.5773)/(1.0-0.5773), 0.0, 1.0 );
    // shape transition
    //w = pow( w, vec2(biplanarExp/8.0) );
    // blend and return
    return (x*w.x + y*w.y) / (w.x + w.y);
}

//triplanar mapping
void getTriplanarUVs(inout geometry geom){
	geom.uvX = jit_in.modelPos.zy*texRepeat; //changed the swizzling from yz to zy
	geom.uvX.x = jit_in.modelNor.x < 0. ? geom.uvX.x : -geom.uvX.x;
	geom.uvY = jit_in.modelPos.xz*texRepeat;
	geom.uvY.x = jit_in.modelNor.y < 0. ? geom.uvY.x : -geom.uvY.x;
	geom.uvZ = jit_in.modelPos.xy*texRepeat;
	geom.uvZ.x = jit_in.modelNor.z >= 0. ? geom.uvZ.x : -geom.uvZ.x;
	geom.uvX.y += 0.5;
	geom.uvZ.x += 0.5;
}

void getTriplanarExpBlend(inout geometry geom){
	geom.triBlend = normalize(pow(abs(jit_in.modelNor), vec3(triplanarBlendingAmount*50.)));
	geom.triBlendNormalizer = 1. / (geom.triBlend.x + geom.triBlend.y + geom.triBlend.z);
}

void getTriplanarHeightMap(inout geometry geom){
	// Height Map Triplanar Blend
	vec3 	blend = abs(jit_in.modelNor.xyz);
			blend /= dot(blend, vec3(1.0,1.0,1.0));
	// Height value from each plane's texture. This is usually
	// packed in to another texture or (less optimally) as a separate 
	// texture.
	float heightX = texture(RMOHTex, geom.uvX).w;
	float heightY = texture(RMOHTex, geom.uvY).w;
	float heightZ = texture(RMOHTex, geom.uvZ).w;

	vec3 	heights = vec3(heightX, heightY, heightZ) + (blend * 3.0);
	float 	height_start = max(max(heights.x, heights.y), heights.z) - clamp(1. - triplanarBlendingAmount, 0.05, 1.);
	vec3 	h = max(heights - vec3(height_start), vec3(0.0,0.0,0.0));
	geom.triBlend =	h / dot(h, vec3(1.0,1.0,1.0));
	geom.triBlendNormalizer = 1. / (geom.triBlend.x + geom.triBlend.y + geom.triBlend.z);
}

vec4 	triplanar(sampler2D tex, in geometry geom){
	vec4 	X = texture(tex, geom.uvX)*geom.triBlend.x;
	vec4 	Y = texture(tex, geom.uvY)*geom.triBlend.y;
	vec4 	Z = texture(tex, geom.uvZ)*geom.triBlend.z;
	return 	(X+Y+Z) * geom.triBlendNormalizer;
}

vec3 	triplanarNormals(sampler2D tex, in geometry geom){
	// Whiteout blend
	// from https://bgolus.medium.com/normal-mapping-for-a-triplanar-shader-10bf39dca05a
	// Tangent space normal maps
	vec3 	tnX = texture(tex, geom.uvX).xyz*2. - vec3(1.);
	vec3 	tnY = texture(tex, geom.uvY).xyz*2. - vec3(1.);
	vec3 	tnZ = texture(tex, geom.uvZ).xyz*2. - vec3(1.);
			tnX.y *= -1.;
			tnX.x *= jit_in.modelNor.x > 0. ? -1. : 1.;
			tnY.y *= -1.;
			tnY.x *= jit_in.modelNor.y > 0. ? -1. : 1.;
			tnZ.y *= -1.;
			tnZ.x *= jit_in.modelNor.z < 0. ? -1. : 1.;
	// Swizzle world normals into tangent space and apply Whiteout blend
			tnX = vec3(
			    tnX.xy + jit_in.modelNor.zy,
			    abs(tnX.z) * jit_in.modelNor.x
			    );
			tnY = vec3(
			    tnY.xy + jit_in.modelNor.xz,
			    abs(tnY.z) * jit_in.modelNor.y
			    );
			//tnY.z *= jit_in.modelNor.y > 0. ? -1. : 1.;
			tnZ = vec3(
			    tnZ.xy + jit_in.modelNor.xy,
			    abs(tnZ.z) * jit_in.modelNor.z
			    );
			tnX *= geom.triBlend.x;
			tnY *= geom.triBlend.y;
			tnZ *= geom.triBlend.z;
	// Swizzle tangent normals to match world orientation and triblend
	return ( M * vec4(normalize( (tnX.zyx + tnY.xzy + tnZ.xyz) * geom.triBlendNormalizer ), 0.)).xyz;
}

// parallax
float getHeight(vec2 uv){
	//forcing to look-up the fist mip level avoids partial derivatives problems
	//aka, random black pixels here and there
	
	return heightScale >= 0. ? textureLod(RMOHTex, uv, 0.).w : 1. - textureLod(RMOHTex, uv, 0.).w;// * 0.95 + 0.05; // bias to avoid stepping over the depth map
}
void binarySearch(inout vec3 P, inout float H, in vec3 offset){
	offset *= 0.5;
	P.xy += offset.xy;
	P.z -= offset.z;
	for(int j = 0; j < 10; j++){
		//prevP = P;
		//prevH = H;
		H = (1. - getHeight(P.xy*texRepeat))*abs(heightScale);
		offset *= 0.5;
		P += P.z > H ? vec3(offset.xy, -offset.z) : vec3(-offset.xy, offset.z);
	}
}

void parallax(inout geometry geom){
	vec3 	V = normalize(eye - jit_in.pos);
	vec3 	P; 
			P.xy = geom.uv/texRepeat;
			P.z = 0.;

	float H;
	float prevH;
	vec3 prevP;
	vec3 offset;

	//linear search
	for(int i = 0; i < parallaxIterations; i++){
		//mat3 	TBN = create_tbn_from_texture(P.xy);
		 		offset = parallaxStep * jit_in.transTBN * V;
				P.xy -= offset.xy;
				P.z += offset.z;
		if(P.z < 0.){
			discard;
			return;
		}
		H = (1. - getHeight(P.xy*texRepeat))*abs(heightScale);
		if(P.z > H){

			binarySearch(P, H, offset);
			geom.uv = texRepeat * P.xy;
			geom.height = H;
			geom.pos    -= geom.N * geom.height;
			return;
		}
		prevH = H;
		prevP = P;
	}
}

float selfShadow(vec3 L, in geometry geom){
	vec3 	P = vec3(geom.uv/texRepeat, geom.height);
	vec3 	offset 	= shadowStep * jit_in.transTBN * L;
			P.xy 	+= offset.xy;
			P.z 	-= offset.z;
	float 	sha = 0.;
	int i;
	for(i = 0; i < shadowIterations; i++){
		 //a stochastic variation of the marching step seems to create better results with low quality settings
		float jittering = fract( fract(float(i)*PI_INV)*abs(P.x+P.z)*2358940.12345) * shadowStep;
		offset 	= ( shadowStep + jittering ) * jit_in.transTBN * L;
		P.xy 	+= offset.xy;
		P.z 	-= offset.z;
		if(P.z < 0.){
			return 1. - saturate(sha*shadowAmount);
		}
		float 	H = (1. - getHeight(P.xy*texRepeat))*abs(heightScale);
		if(P.z > H){
			sha = max(sha, (P.z - H)/(1. + float(i)*0.2));	
		}
	}
	return i == shadowIterations - 1 ? 1. : 1. - saturate(sha*shadowAmount);
}

//PBR functions
vec3 	fresnelSchlickRoughness(float HdotV, vec3 F0, float rou){
	float 	x = saturate(1. - HdotV); //x^5
	float 	x2 = x*x;
			x2 *= x2;
			x *= x2;
    return F0 + (max(vec3(1.0 - rou), F0) - F0) * x;
} 
float 	DistributionGGX(float NdotH, float rou){
			rou *= rou; //Disney trick!
			rou *= rou; //roughness^4
     		NdotH *= NdotH; //square the dot product
    float 	denom = (NdotH * (rou - 1.0) + 1.0);
    		denom *= denom;
    		denom *= PI;
	
    return 	rou / denom;
}
float 	GeometrySchlickGGX(float NdotV, float rou){
			rou += 1.;
    float 	k = (rou*rou) / 8.0; //Disney trick again...
    return NdotV / ( NdotV * (1.0 - k) + k );
}
float 	GeometrySmith(float NdotV, float NdotL, float rou){
    float ggx2  = GeometrySchlickGGX(NdotV, rou);
    float ggx1  = GeometrySchlickGGX(NdotL, rou);
	
    return ggx1 * ggx2;
} 
vec3 	getRadiance(vec3 V, vec3 N, vec3 L, vec3 rad, vec3 pos, in material mate){

	vec3	H = normalize(V + L);					//half vector

	//compute dot products
	float	HdotV = saturate(dot(H, V));
    float 	NdotV = saturate(dot(N, V)) + 0.001; //avoid dividing by 0
    float 	NdotL = saturate(dot(N, L));
    float   NdotH = saturate(dot(N, H));

	vec3 	F  	= fresnelSchlickRoughness(HdotV, mate.F0, mate.rou); 		//compute fresnel
	float	NDF = DistributionGGX(NdotH, mate.rou);   	//compute NDF term
	float 	G   = GeometrySmith(NdotV, NdotL, mate.rou); //compute G term   
	vec3 	spe = (NDF*G*F)/(4.*NdotV*NdotL+0.0001);  

	vec3 	kS = F;					//k specular
	vec3 	kD = vec3(1.0) - kS;	//k diffuse
			kD *= 1.0 - mate.met;		//nullify k diffuse if metallic

	return 	(kD * mate.alb * PI_INV + spe) * rad * NdotL;
}

//gamma correction
vec3 	gammaCorrection(vec3 x){
	x /= x + vec3(1.);  //from HDI lo LDI
	//lin = ACES(lin);
	return lin2sRGB(x);	//gamma correction
}

//from cube to equirectangular sampling coordinates
vec2 	dir2uv(vec3 v){
    vec2 uv = vec2(atan(v.z, v.x), asin(v.y));
    uv *= vec2(-0.1591, -0.3183); //to invert atan
    uv += 0.5;
    return uv;
}

//compute the solid angle
float 	rectSolidAngle(vec3 v0, vec3 v1, vec3 v2, vec3 v3){
	// Based on the technique in EA's frostbite engine
    vec3 n0 = normalize(cross(v0, v1));
    vec3 n1 = normalize(cross(v1, v2));
    vec3 n2 = normalize(cross(v2, v3));
    vec3 n3 = normalize(cross(v3, v0));
    
    float g0 = acos(dot(-n0, n1));
	float g1 = acos(dot(-n1, n2));
	float g2 = acos(dot(-n2, n3));
	float g3 = acos(dot(-n3, n0));
    
    return g0 + g1 + g2 + g3 - TWOPI; 
}

//custom GGX
float 	normalDistributionGGXRect(float NdotH, float alpha, float alphaPrime){
    float 	alpha2 		= alpha * alpha;
    float 	alpha4 		= alpha2 * alpha2;
    float 	alphaPrime3 = alphaPrime * alphaPrime * alphaPrime;
    float 	denom 		= NdotH * NdotH * (alpha2 - 1.) + 1.;
    
    return 	(alpha2 * alphaPrime3) / (denom * denom);   
}

//find intersection with plane
vec3 	rayPlaneIntersect(vec3 ro, vec3 rd, vec3 ligDir, vec3 ligPos){

	float a = dot(ligDir, rd);
    return a == 0. ? ro + rd * (dot(ligDir, ligPos - ro) / a) : vec3(ro + rd*1000);
}

float getHeightDifference(vec2 uv, float lod, float currH){
	return heightScale >= 0. ? 	max(0., (textureLod(RMOHTex, uv, lod).w - currH)) : 
					max(0., (1. - (textureLod(RMOHTex, uv, lod).w) - currH));
}

float getAO(in geometry geom, float currH){

	float 	occ = 0.;
	vec2 	off = vec2(occlusionOffset, 0.) / texRepeat;
	float 	lod = 0.;
	float 	intensity = 1.;

	for(int i = 0; i < occlusionIterations; i++){
		float toAdd = 0.;
		toAdd += getHeightDifference(geom.uv - off.xy, lod, currH);
		toAdd += getHeightDifference(geom.uv + off.xy, lod, currH);
		toAdd += getHeightDifference(geom.uv - off.yx, lod, currH);
		toAdd += getHeightDifference(geom.uv + off.yx, lod, currH);
		occ += toAdd*intensity;
		off *= 2.;
		lod += 2.;
		intensity *= 0.5;
	}

	//occ /= float(occlusionIterations);
	occ *= abs(heightScale);
	occ *= occlusionAmount;
	occ /= 1. + occ;
	return 1. - occ;

}

float getNormAndHeightFromDerivatives(inout geometry geom, inout material mate){

	// 3 taps: better quality than float2(ddx fine(H), ddy fine(H)).
	vec2 	texDx = dFdx(jit_in.uv), texDy = dFdy(jit_in.uv);
	vec3 	dPdx = dFdx(geom.pos), dPdy = dFdy(geom.pos);
	float 	Hll = getHeight(geom.uv);
	float 	Hlr = getHeight(geom.uv + texDx); //*** put back texDx
	float 	Hul = getHeight(geom.uv + texDy);
	vec2 	deriv = vec2(Hlr - Hll, Hul - Hll);
		deriv *= abs(heightScale);

	// Equation 3 in [Mikkelsen 2010].
	vec3 	vR1 = cross(dPdy, geom.N);
	vec3 	vR2 = cross(geom.N, dPdx);
	float 	det = dot(dPdx, vR1);
	float 	eps = 1.192093e-15F;
	float 	sign_det = det < 0.0 ? -1.0 : 1.0;
	float 	s = sign_det/max(eps, abs(det));
		    geom.N = normalize(geom.N - s*(deriv.x*vR1 + deriv.y*vR2));
            
    return Hll;
}
//PBR light functions

//Point light	
vec3	get_point_light(in PBRLightSourceParameters lig, in material mate, in geometry geom){
		
	vec3	ligMinPos       = lig.position.xyz - geom.pos;
	float	d 		= length(ligMinPos);	
	float 	atten 	= 1.0 / (lig.constAtten+lig.linAtten*d+lig.quadAtten*d*d);

	vec3	L 		= normalize(ligMinPos);				//light direction
	vec3	rad 		= lig.color.rgb * atten;			//radiance
	bool	compute 	= rad.x+rad.y+rad.z > 0.05;
	return  compute ? 	
#ifdef JIT_PBR_SELF_SHADOW
                selfShadow(normalize(jit_in.transTBN * ligMinPos), geom) * 
#endif
		getRadiance(geom.V, geom.N, L, rad, geom.pos, mate) :
		vec3(0.);
}

vec3	get_point_shadow_light(in PBRLightSourceParameters lig, in material mate, in geometry geom, in sampler2D shadowMap, in vec4 posls, in float range){
		
	vec3	ligMinPos       = lig.position.xyz - geom.pos;
	float	d 		= length(ligMinPos);	
	float 	atten 	= 1.0 / (lig.constAtten+lig.linAtten*d+lig.quadAtten*d*d);

	vec3	L 		= normalize(ligMinPos);				//light direction
	vec3	rad 		= lig.color.rgb * atten;			//radiance
	bool	compute 	= rad.x+rad.y+rad.z > 0.05;
	return  compute ? 	
#ifdef JIT_PBR_SELF_SHADOW
                selfShadow(normalize(jit_in.transTBN * ligMinPos), geom) * 
#endif
                compute_shadow(shadowMap, posls, d / range, vsm_params) *
		getRadiance(geom.V, geom.N, L, rad, geom.pos, mate) :
		vec3(0.);
}

//Directional light
vec3	get_directional_light(in PBRLightSourceParameters lig, in material mate, in geometry geom){
	
        vec3    direction = normalize(lig.position.xyz);
        return  
#ifdef JIT_PBR_SELF_SHADOW
                selfShadow(normalize(direction), geom) * 
#endif
                getRadiance(geom.V, geom.N, direction, lig.color.rgb, geom.pos, mate);
}

vec3	get_directional_shadow_light(in PBRLightSourceParameters lig, in material mate, in geometry geom, in sampler2D shadowMap, in vec4 posls, in float range){
	
        vec3    direction = normalize(lig.position.xyz);
        return  
#ifdef JIT_PBR_SELF_SHADOW
                selfShadow(normalize(direction), geom) * 
#endif
                compute_shadow(shadowMap, posls, (posls.z * 0.5) + 0.5, vsm_params) *
                getRadiance(geom.V, geom.N, direction, lig.color.rgb, geom.pos, mate);
}

//spot light
vec3  	get_spot_light(in PBRLightSourceParameters lig, in material mate, in geometry geom){

	vec3	ligMinPos = lig.position.xyz - geom.pos;
	float	d 	= length(ligMinPos);	
	float 	atten 	= 1.0 / (lig.constAtten+lig.linAtten*d+lig.quadAtten*d*d);

	vec3	L           = normalize(ligMinPos);				//light direction
	float 	spotatten   = dot(-L, lig.spotDir);
	        atten       = spotatten > lig.spotCosCutoff ? atten * pow(spotatten, lig.spotExponent) : 0.;
	vec3	rad 		= lig.color.rgb * atten;			//radiance
	bool	compute 	= rad.x+rad.y+rad.z > 0.05;
        return  compute ?   
#ifdef JIT_PBR_SELF_SHADOW
                selfShadow(normalize(jit_in.transTBN * ligMinPos), geom) * 
#endif
                getRadiance(geom.V, geom.N, L, rad, geom.pos, mate) :
                vec3(0.);
}

vec3  	get_spot_shadow_light(in PBRLightSourceParameters lig, in material mate, in geometry geom, in sampler2D shadowMap, in vec4 posls, in float range){

	vec3	ligMinPos = lig.position.xyz - geom.pos;
	float	d 	= length(ligMinPos);	
	float 	atten 	= 1.0 / (lig.constAtten+lig.linAtten*d+lig.quadAtten*d*d);

	vec3	L           = normalize(ligMinPos);				//light direction
	float 	spotatten   = dot(-L, lig.spotDir);
	        atten       = spotatten > lig.spotCosCutoff ? atten * pow(spotatten, lig.spotExponent) : 0.;
	vec3	rad 		= lig.color.rgb * atten;			//radiance
	bool	compute 	= rad.x+rad.y+rad.z > 0.05;
        return  compute ?   
#ifdef JIT_PBR_SELF_SHADOW
                selfShadow(normalize(jit_in.transTBN * ligMinPos), geom) * 
#endif
                compute_shadow(shadowMap, posls, d / range, vsm_params) *
                getRadiance(geom.V, geom.N, L, rad, geom.pos, mate) :
                vec3(0.);
}

vec3	get_hemisphere_light(in PBRLightSourceParameters lig, in material mate, in geometry geom){
        vec3    direction = normalize(lig.position.xyz);
        vec3    rad =  
#ifdef JIT_PBR_SELF_SHADOW
                selfShadow(normalize(direction), geom) * 
#endif
                getRadiance(geom.V, geom.N, direction, lig.color.rgb, geom.pos, mate);

        float weight = 0.5 * dot(geom.N, direction) + 0.5;
        return mix(lig.ambient.rgb, rad, weight);
}

vec3	get_hemisphere_shadow_light(in PBRLightSourceParameters lig, in material mate, in geometry geom, in sampler2D shadowMap, in vec4 posls, in float range){
        vec3    direction = normalize(lig.position.xyz);
        vec3    rad =  
#ifdef JIT_PBR_SELF_SHADOW
                selfShadow(normalize(direction), geom) * 
#endif
                compute_shadow(shadowMap, posls, (posls.z * 0.5) + 0.5, vsm_params) *
                getRadiance(geom.V, geom.N, direction, lig.color.rgb, geom.pos, mate);

        float weight = 0.5 * dot(geom.N, direction) + 0.5;
        return mix(lig.ambient.rgb, rad, weight);
}

//PBR Image-based lighting
vec3  	getIBL(in material mate, in geometry geom){

	float	NdotV = max(dot(geom.N, geom.V), 0.);
	vec3 	kS = fresnelSchlickRoughness(NdotV, mate.F0, mate.rou);
	vec3 	kD = vec3(1.) - kS;
		kD *= 1. - mate.met;
	vec3 	irradiance = texture(environmentTex, geom.N).rgb;
	vec3	diffuse = irradiance * mate.alb * kD;
        vec3 	specular = vec3(0.);

#ifdef JIT_PBR_IBL_REFLECTION
        const   float MAX_REFLECTION_LOD = 4.0;
	vec3	ref 			= reflect(-geom.V, geom.N);
	vec3 	prefilteredColor 	= textureLod(reflectionTex, ref, mate.rou * MAX_REFLECTION_LOD).rgb;
	vec2 	envBRDF          	= texture(integMap, vec2(NdotV, mate.rou)).xy;
 	        specular 		= prefilteredColor * (kS * envBRDF.x + envBRDF.y); 
#endif

	return 	(diffuse + specular) * mate.occ; 
}

//PBR rectangular light functions
#define RECT_LIGHT_RADIUS 4.0 //controlla cosa rappresenta questo parametro ***
#define RECT_LIGHT_INTENSITY 64.0 //controlla cosa rappresenta questo parametro ***
struct rectlight{
	vec3  	ligPos;
	vec3    ligCol;
	vec3  	ligDir;
	float 	width, height;
	bool 	twoSided;
};
vec3    getRectLight(in rectlight lig, in material mate, in geometry geom){
    
    //fill light parameters
    vec3    right           = cross(lig.ligDir, vec3(0., 1., 0.));
    vec3    up              = cross(right, lig.ligDir);
    float   halfWidth       = lig.width  * 0.5;
    float   halfHeight      = lig.height * 0.5;
    vec3    halfRight       = halfWidth*right;
    vec3    halfUp          = halfHeight*up;
    vec3    p0              = lig.ligPos + halfRight + halfUp;
    vec3    p1              = lig.ligPos - halfRight + halfUp;;
    vec3    p2              = lig.ligPos - halfRight - halfUp;;
    vec3    p3              = lig.ligPos + halfRight - halfUp;;
    vec3    p0_P            = p0 - geom.pos;
    vec3    p1_P            = p1 - geom.pos;
    vec3    p2_P            = p2 - geom.pos;
    vec3    p3_P            = p3 - geom.pos;
    vec3    pos_P           = lig.ligPos - geom.pos;

    // facing side check
    float   windingCheck =  lig.twoSided ? -1. : dot(cross(right, up), lig.ligPos - geom.pos);
    if (windingCheck > 0.){return vec3(0.);}
    
    float   solidAngle = rectSolidAngle(p0_P, p1_P, p2_P, p3_P);
    
    // diffuse (NdotL)
    float   NdotL = solidAngle * 0.2 * (
            saturate(dot(normalize(p0_P), geom.N)) +
            saturate(dot(normalize(p1_P), geom.N)) +
            saturate(dot(normalize(p2_P), geom.N)) +
            saturate(dot(normalize(p3_P), geom.N)) +
            saturate(dot(normalize(pos_P), geom.N)));    
    // Crude hack for diffuse.
    // Average normal and inversed emitter direction to create
    // a vector W that points towards the light.
    //vec3 W = normalize(geom.N + lig.ligDir); 
   //   NdotL = saturate(dot(geom.N, W))*solidAngle;

    // specular
            //get ray-plane intersection
    float   LdotR = dot(lig.ligDir, geom.R);
    vec3    planePointCenter    = geom.pos + geom.R * ( dot(lig.ligDir, lig.ligPos - geom.pos) / LdotR );
            planePointCenter    -= lig.ligPos;
            LdotR = abs(LdotR) - LdotR; //this factor cancels out the weird looking reflections
            // project point on the plane on which the rectangle lies
    vec2    planePointProj      = vec2( dot(planePointCenter, right), 
                                        dot(planePointCenter, up)
                                        );

    vec2    c = min(abs(planePointProj), vec2(halfWidth, halfHeight)) * sign(planePointProj);

    vec3    L = lig.ligPos + right * c.x + up * c.y;    
            L -= geom.pos;
    vec3    tanLigDir = normalize(jit_in.transTBN * pos_P);
    vec3    l           = normalize(L);
    vec3    h           = normalize(geom.V + l);
    float   lightDist   = length(L);
    
    float   NdotH = max(dot(geom.N, h), 0.);
    float   HdotV = dot(h, geom.V);
    float   NdotV = max(dot(geom.N, geom.V), 0.) + 0.001;

    float   alpha       = mate.rou * mate.rou;
    //float     alphaPrime  = saturate(alpha + (RECT_LIGHT_RADIUS / (2. * lightDist)));
    float   alphaPrime  = saturate(alpha + (lig.width*lig.height / (2. * lightDist)));
    //float     alphaPrime  = saturate(1. / (1. + lightDist * lightDist));

    vec3    F           = fresnelSchlickRoughness(HdotV, mate.F0, mate.rou);        //compute fresnel
    vec3    result      = normalDistributionGGXRect(NdotH, alpha, alphaPrime)
                        * GeometrySmith(NdotV, NdotL, mate.rou)
                        * F;
            result /= 1. + lig.width*lig.height;

    vec3    kD = vec3(1.) - F;//rectLightFresnel;
            kD *= 1. - mate.met;
        
    float sha = 
#ifdef JIT_PBR_SELF_SHADOW 
        selfShadow(tanLigDir, geom);
#else
        1.;
#endif
    return  (kD * PI_INV * mate.alb + result*LdotR) * NdotL * lig.ligCol * sha;   
}

vec3    getRectLightTextured(in rectlight lig, in material mate, in geometry geom){
    
    //fill light parameters
    vec3    right           = cross(lig.ligDir, vec3(0., 1., 0.));
    vec3    up              = cross(right, lig.ligDir);
    float   halfWidth       = lig.width  * 0.5;
    float   halfHeight      = lig.height * 0.5;
    vec3    halfRight       = halfWidth*right;
    vec3    halfUp          = halfHeight*up;
    vec3    p0              = lig.ligPos + halfRight + halfUp;
    vec3    p1              = lig.ligPos - halfRight + halfUp;;
    vec3    p2              = lig.ligPos - halfRight - halfUp;;
    vec3    p3              = lig.ligPos + halfRight - halfUp;;
    vec3    p0_P            = p0 - geom.pos;
    vec3    p1_P            = p1 - geom.pos;
    vec3    p2_P            = p2 - geom.pos;
    vec3    p3_P            = p3 - geom.pos;
    vec3    pos_P           = lig.ligPos - geom.pos;

    // facing side check
    float   windingCheck =  lig.twoSided ? -1. : dot(cross(right, up), lig.ligPos - geom.pos);
    if (windingCheck > 0.){return vec3(0.);}
    
    float   solidAngle = rectSolidAngle(p0_P, p1_P, p2_P, p3_P);
    
    // diffuse (NdotL)
    float   NdotL = solidAngle * 0.2 * (
            saturate(dot(normalize(p0_P), geom.N)) +
            saturate(dot(normalize(p1_P), geom.N)) +
            saturate(dot(normalize(p2_P), geom.N)) +
            saturate(dot(normalize(p3_P), geom.N)) +
            saturate(dot(normalize(pos_P), geom.N)));    
    // Crude hack for diffuse.
    // Average normal and inversed emitter direction to create
    // a vector W that points towards the light.
    //vec3 W = normalize(geom.N + lig.ligDir); 
   //   NdotL = saturate(dot(geom.N, W))*solidAngle;

    // specular
            //get ray-plane intersection
    float   LdotR = dot(lig.ligDir, geom.R);
    vec3    planePointCenter    = geom.pos + geom.R * ( dot(lig.ligDir, lig.ligPos - geom.pos) / LdotR );
            planePointCenter    -= lig.ligPos;
            LdotR = abs(LdotR) - LdotR; //this factor cancels out the weird looking reflections
            // project point on the plane on which the rectangle lies
    vec2    planePointProj      = vec2( dot(planePointCenter, right), 
                                        dot(planePointCenter, up)
                                        );

    vec2    c = min(abs(planePointProj), vec2(halfWidth, halfHeight)) * sign(planePointProj);
    // calculate light uv
    vec2 luv = vec2(c.x, -c.y) / vec2(lig.width, lig.height) + 0.5;

    vec3    L = lig.ligPos + right * c.x + up * c.y;    
            L -= geom.pos;
    vec3    tanLigDir = normalize(jit_in.transTBN * pos_P);
    vec3    l           = normalize(L);
    vec3    h           = normalize(geom.V + l);
    float   lightDist   = length(L);
    
    float   NdotH = max(dot(geom.N, h), 0.);
    float   HdotV = dot(h, geom.V);
    float   NdotV = max(dot(geom.N, geom.V), 0.) + 0.001;

    float   alpha       = mate.rou * mate.rou;
    float   alphaPrime  = saturate(alpha + (RECT_LIGHT_RADIUS / (2. * lightDist)));
    //float     alphaPrime  = saturate(alpha + (lig.width*lig.height / (2. * lightDist)));
    //float     alphaPrime  = saturate(1. / (1. + lightDist * lightDist));
    
    // calculate approx light diffuse and specular colors (super experimental :p) 
    //float     difLod =    pow(exp(lightDist + .5), 2.);
    vec3    difCol =    textureLod(rectLightTex, vec2(0.5, 0.5), 8.).rgb;
    /*
    vec3    difCol =    textureLod(rectLightTex, vec2(0.0, 0.0), 3.).rgb + 
                        textureLod(rectLightTex, vec2(1.0, 0.0), 3.).rgb + 
                        textureLod(rectLightTex, vec2(0.0, 1.0), 3.).rgb + 
                        textureLod(rectLightTex, vec2(1.0, 1.0), 3.).rgb + 
                        textureLod(rectLightTex, vec2(0.5, 0.5), 3.).rgb;

            difCol *= 0.2;
    */
    float   speLod = (lightDist) * (mate.rou*2. + 1.) * 1.5;
            //speLod += abs(luv.x - 0.5)*2. * 2.;
            //speLod += abs(luv.y - 0.5)*2. * 2.;
    vec3    speCol = textureLod(rectLightTex, luv, speLod).rgb;
            //speCol = mix(speCol, difCol, vec3(saturate(lightDist*0.5*(mate.rou + 1.))));

    vec3    F           = fresnelSchlickRoughness(HdotV, mate.F0, mate.rou);        //compute fresnel
    vec3    result      = normalDistributionGGXRect(NdotH, alpha, alphaPrime)
                        * GeometrySmith(NdotV, NdotL, mate.rou)
                        * F;
            result      /= 1. + lig.width*lig.height;
    vec3    kD = vec3(1.) - F;//rectLightFresnel;
            kD *= 1. - mate.met;
    float   sha = 
#ifdef JIT_PBR_SELF_SHADOW 
        selfShadow(tanLigDir, geom);
#else 
        1.;
#endif
    return  (kD * PI_INV * mate.alb*difCol + result*LdotR*speCol) * NdotL * sha;   
}

layout(location = 0) out vec4 col;



#define NUM_LIGHTS (1)
layout (std140) uniform PBRParameters {
	PBRMaterialParameters pbrmtl;
	PBRLightSourceParameters pbrlight[NUM_LIGHTS];
};



uniform sampler2D shadowMap0;
uniform float jit_Light_RANGE0;
in jit_PerVertexShadow {
	smooth vec4 jit_Surface_position_ls0;
} jit_shadow_in;




void 	main() {
	material 	mate;
	geometry 	geom;

	geom.uv 	= jit_in.uv;
	geom.pos  	= jit_in.pos;
	geom.height = 1.;
	

	vec4 RMOH	= texture(RMOHTex, geom.uv);	


	geom.N = normalize(jit_in.nor);
	parallax(geom);
	float h = getNormAndHeightFromDerivatives(geom, mate);	
	
	mate.occ = getAO(geom, h);


	vec4 alb 	= texture(albedoTex, geom.uv) * pbrmtl.diffuse;
	mate.alb	= alb.rgb;
	mate.rou 	= RMOH.r * roughness;
	mate.met 	= RMOH.g * metalness;
	mate.F0 	= mix(vec3(0.04), mate.alb, vec3(mate.met));  //use alb as F0 if metallic

	geom.V 		= normalize(eye - jit_in.pos);	//view direction
	geom.R 		= reflect(geom.V, geom.N);

	col.rgb = vec3(0.);

	col.rgb += get_directional_shadow_light(pbrlight[0], mate, geom, shadowMap0, jit_shadow_in.jit_Surface_position_ls0, jit_Light_RANGE0);
	

	col.rgb += getIBL(mate, geom);

	col.rgb += pbrmtl.emission.rgb;

	col.rgb = gammaCorrection(col.rgb);

	col.a = alb.a;


}		
		

]]>
		</program>
	</language>
</jittershader>